
type Employee {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameFull: String!
  nameFirst: String!
  nameMiddle: String
  namePaternal: String
  nameMaternal: String
  documentType: EmployeeDocumentTypeEnum
  documentNumber: String
  sex: EmployeeSexEnum
  dateOfBirth: DateTime
  nationality: String
  jubilado: Boolean
  personaConDiscapacidad: Boolean
  tutorPersonaConDiscapacidad: Boolean
  cajaDeSalud: EmployeeCajaDeSaludEnum
  aportaAFP: Boolean
  AFP: EmployeeAFPEnum
  cargo: String
  zkTimePin: Int!
  department: Department
  shifts: [Shift!]!
  exceptions: [Exception!]!
  attendanceReport(from: DateTime! to: DateTime! withExceptions: Boolean!): AttendanceReport!
  calendarDate(date: DateTime! withExceptions: Boolean!): CalendarDate!
  calendarRange(from: DateTime! to: DateTime! withExceptions: Boolean!): [CalendarDate]!
  offlineRange(from: DateTime! to: DateTime! withExceptions: Boolean! category: ScheduleOfflineCategory!): [CalendarDate]!
}

type CalendarDate {
  date: DateTime!
  schedule: Schedule
  shift: Shift
  exception: Exception
}

type AttendanceReport {
  from: DateTime!
  to: DateTime!
  events: [DateTime!]!
  eventCount: Int!
  shifts: [Shift!]!
  exceptions: [Exception!]!
  dates: [AttendanceReportDate!]!
}

type AttendanceReportDate {
  date: DateTime!
  innerBound: DateTime!
  outerBound: DateTime!
  events: [DateTime!]!
  eventCount: Int!
  schedule: Schedule
  shift: Shift
  exception: Exception
  compliance: AttendanceReportDateCompliance
}

type AttendanceReportDateCompliance {
  flags: AttendanceReportDateComplianceFlags
  startLateTime: Int!
  startEventsMissing: Int!
  endEarlyTime: Int!
  endEventsMissing: Int!
  restOvertime: Int!
  absentTime: Int!
  unsanctionedEvents: Int!
}

type AttendanceReportDateComplianceFlags {
  hasLateStartEvent: Boolean
  hasEarlyExitEvent: Boolean
  hasRestOvertime: Boolean
  hasUnsanctionedEvents: Boolean
  hasAbsence: Boolean
}
