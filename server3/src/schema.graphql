# import UUID from "./generated/prisma.graphql"
# import UserCreateInput from "./generated/prisma.graphql"
# import Employee EmployeeCreateInput EmployeeUpdateInput EmployeeWhereUniqueInput from "./generated/prisma.graphql"
# import Schedule ScheduleCreateInput from "./generated/prisma.graphql"
# import Shift ShiftCreateInput from "./generated/prisma.graphql"
# import Exception ExceptionCreateInput from "./generated/prisma.graphql"

type Query {
  sessionUser: User
  user(id: UUID!): User
  users: [User!]!
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees: [Employee!]!
  exception(id: UUID!): Exception
  exceptions: [Exception]!
  shift(id: UUID!): Shift
  shifts: [Shift]!
  schedule(id: UUID!): Schedule
  schedules: [Schedule]!
}

type Mutation {
  createUser(data: UserCreateInput!): User
  createEmployee(data: EmployeeCreateInput!): Employee
  updateEmployee(data: EmployeeUpdateInput! where: EmployeeWhereUniqueInput!): Employee
  createShift(data: ShiftCreateInput!): Shift
  createException(data: ExceptionCreateInput!): Exception
  createSchedule(data: ScheduleCreateInput!): Schedule!
  authenticate(username: String!, password: String!): AuthPayload
}
# type Subscription {
#   newLink: LinkSubscriptionPayload
#   newVote: VoteSubscriptionPayload
# }

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: UUID!
  username: String!
  departments: [Department]!
}

type Employee {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameFirst: String!
  nameMiddle: String
  namePaternal: String
  nameMaternal: String
  nameFull: String
  documentType: DocumentTypeEnum,
  documentNumber: String,
  sex: SexEnum
  dateOfBirth: DateTime
  nationality: String
  jubilado: Int
  personaConDiscapacidad: Int
  tutorPersonaConDiscapacidad: Int
  cajaDeSalud: Int
  aportaAFP: Int
  AFP: Int
  cargo: String
  zkTimePin: Int!
  department: EmployeeDepartment
  shifts: [Shift!]!
  attendanceReport(from: DateTime! to: DateTime!): [AttendanceReportDate!]!
}

type AttendanceReportDate {
  date: DateTime!
  innerBound: DateTime!
  outerBound: DateTime!
  events: [DateTime!]!
  schedule: Schedule!
  shift: Shift
  exception: Exception
}

type EmployeeReport {
  attendance(from: DateTime! to: DateTime!): [AttendanceDate!]!
  exceptions(status: ExceptionStatusEnum! from: DateTime! to: DateTime!): [Exception!]!
  schedule(date: !):
}

type EmployeeDepartment {
  id: UUID!
  name: String!
}

type AttendanceDate {
  date: DateTime!
  innerBound: DateTime!
  outerBound: DateTime!
  schedule: Schedule!
  shift: Shift
  exception: Exception
  report: AttendanceReport!
}

type AttendanceReport {
  events: [DateTime!]!
  summary: AttendanceSummary!
  timeline: [AttendanceReportTimelineElement!]!
  restline: [AttendanceReportRestlineElement!]!
  offline1: AttendanceReportOfflineElement!
  offline2: AttendanceReportOfflineElement!
}

type AttendanceSummary {
  eventCount: Int
}

type AttendanceReportTimelineElement {
  eventCount: Int
}

type AttendanceReportRestlineElement {
  eventCount: Int
}

type AttendanceReportOfflineElement {
  eventCount: Int
}
