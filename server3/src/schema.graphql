# import UUID from "./generated/prisma.graphql"
# import UserCreateInput from "./generated/prisma.graphql"
# import Employee EmployeeCreateInput EmployeeUpdateInput EmployeeWhereUniqueInput EmployeeWhereInput EmployeeOrderByInput EmployeeConnection from "./generated/prisma.graphql"
# import Schedule ScheduleWhereUniqueInput ScheduleWhereInput ScheduleOrderByInput ScheduleCreateInput ScheduleConnection from "./generated/prisma.graphql"
# import Shift ShiftWhereUniqueInput ShiftWhereInput ShiftOrderByInput ShiftCreateInput from "./generated/prisma.graphql"
# import Exception ExceptionWhereUniqueInput ExceptionWhereInput ExceptionOrderByInput ExceptionCreateInput from "./generated/prisma.graphql"
# import Department DepartmentWhereInput DepartmentWhereUniqueInput DepartmentOrderByInput DepartmentCreateInput DepartmentUpdateInput from "./generated/prisma.graphql"

type Query {
  sessionUser: User
  user(id: UUID!): User
  users: [User!]!
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  shift(where: ShiftWhereUniqueInput!): Shift
  shifts(where: ShiftWhereInput, orderBy: ShiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shift]!
  exception(where: ExceptionWhereUniqueInput!): Exception
  exceptions(where: ExceptionWhereInput, orderBy: ExceptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exception]!
  department(where: DepartmentWhereUniqueInput!): Department!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  attendanceReport(employee: AttendanceReportEmployeeUniqueInput! from: DateTime! to: DateTime!): AttendanceReport!
  attendanceReports(employees: AttendanceReportEmployeeInput! from: DateTime! to: DateTime!): [AttendanceReport!]!
}

type Mutation {
  createUser(data: UserCreateInput!): User
  createEmployee(data: EmployeeCreateInput!): Employee
  updateEmployee(data: EmployeeUpdateInput! where: EmployeeWhereUniqueInput!): Employee
  createShift(data: ShiftCreateInput!): Shift
  createException(data: ExceptionCreateInput!): Exception
  createSchedule(data: ScheduleCreateInput!): Schedule!
  authenticate(username: String!, password: String!): AuthPayload
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput! where: DepartmentWhereUniqueInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department!
}

input AttendanceReportEmployeeInput {
  where: EmployeeWhereInput
  where: EmployeeWhereInput
  orderBy: EmployeeOrderByInput
  skip: Int
  after: String
  before: String
  first: Int
  last: Int
}

input AttendanceReportEmployeeUniqueInput {
  where: EmployeeWhereUniqueInput!
}

type AttendanceReport {
  info: String
  from: DateTime!
  to: DateTime!
  employee: Employee
  shifts: [Shift!]!
  exceptions: [Exception!]!
  dates: [AttendanceReportDate!]!
}

type AttendanceReportDate {
  date: DateTime!
  innerBound: DateTime!
  outerBound: DateTime!
  events: [DateTime!]!
  schedule: Schedule!
  shift: Shift
  exception: Exception
}

# type Subscription {
#   newLink: LinkSubscriptionPayload
#   newVote: VoteSubscriptionPayload
# }

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: UUID!
  username: String!
  departments: [Department]!
}

type Employee {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameFirst: String!
  nameMiddle: String
  namePaternal: String
  nameMaternal: String
  nameFull: String
  documentType: DocumentTypeEnum,
  documentNumber: String,
  sex: SexEnum
  dateOfBirth: DateTime
  nationality: String
  jubilado: Int
  personaConDiscapacidad: Int
  tutorPersonaConDiscapacidad: Int
  cajaDeSalud: Int
  aportaAFP: Int
  AFP: Int
  cargo: String
  zkTimePin: Int!
  department: EmployeeDepartment
  shifts: [Shift!]!
}

type EmployeeReport {
  attendance(from: DateTime! to: DateTime!): [AttendanceDate!]!
  exceptions(status: ExceptionStatusEnum! from: DateTime! to: DateTime!): [Exception!]!
  schedule(date: DateTime!): Schedule
}

enum ExceptionStatusEnum {
  PENDING
  AUTHORIZED
  DENIED
}

type EmployeeDepartment {
  id: UUID!
  name: String!
}

type AttendanceDate {
  date: DateTime!
  innerBound: DateTime!
  outerBound: DateTime!
  schedule: Schedule!
  shift: Shift
  exception: Exception
  report: AttendanceReport!
}

type AttendanceReport {
  events: [DateTime!]!
  summary: AttendanceSummary!
  timeline: [AttendanceReportTimelineElement!]!
  restline: [AttendanceReportRestlineElement!]!
  offline1: AttendanceReportOfflineElement!
  offline2: AttendanceReportOfflineElement!
}

type AttendanceSummary {
  eventCount: Int
}

type AttendanceReportTimelineElement {
  eventCount: Int
}

type AttendanceReportRestlineElement {
  eventCount: Int
}

type AttendanceReportOfflineElement {
  eventCount: Int
}
