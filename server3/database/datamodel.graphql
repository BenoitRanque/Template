# type Link {
#   id: ID! @unique
#   createdAt: DateTime!
#   description: String!
#   url: String!
#   postedBy: User
#   votes: [Vote!]!
# }

# type User {
#   id: ID! @unique
#   name: String!
#   email: String! @unique
#   password: String!
#   links: [Link!]!
#   votes: [Vote!]!
# }

# type Vote {
#   id: ID! @unique
#   link: Link!
#   user: User!
# }

type User {
  id: UUID! @unique
  username: String! @unique
  password: String!
  departments: [Employee!]!
}

type Employee {
  id: UUID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  nameFirst: String!
  nameMiddle: String
  namePaternal: String
  nameMaternal: String
  documentType: DocumentTypeEnum,
  documentNumber: String,
  sex: SexEnum
  dateOfBirth: DateTime
  nationality: String
  jubilado: Int
  personaConDiscapacidad: Int
  tutorPersonaConDiscapacidad: Int
  cajaDeSalud: Int
  aportaAFP: Int
  AFP: Int
  cargo: String
  zkTimePin: Int!
  department: Department
  shifts: [Shift!]!
  exceptions: [Exception!]!
}

type Department {
  id: UUID! @unique
  name: String!
  subordinates: [Employee!]!
  supervisors: [User!]!
}

enum SexEnum {
  M
  F
}

enum DocumentTypeEnum {
  CI
  PASSAPORTE
}

type Shift {
  id: UUID! @unique
  description: String
  employee: Employee!
  startDate: DateTime!
  endDate: DateTime
  startIndex: Int!
  slots: [ShiftSlot!]!
  owner: User! @relation(name: "ShiftToShiftOwner")
}

type ShiftSlot {
  id: UUID! @unique
  schedule: Schedule!
  index: Int!
}

type Exception {
  id: UUID! @unique
  employee: Employee!
  slots: [ExceptionSlot!]!
  autorization: ExceptionAuthorization
  owner: User! @relation(name: "ExceptionToExceptionOwner")
}

type ExceptionSlot {
  id: UUID! @unique
  schedule: Schedule!
  date: DateTime!
}

type ExceptionAuthorization {
  id: UUID! @unique
  granted: Boolean!
  exception: Exception!
  user: User! @relation(name: "ExceptionToExceptionGrantor")
}

type Schedule {
  id: UUID! @unique
  description: String
  baseTime: Int!
  custom: Boolean! @default(value: "true")
  timeline: [ScheduleTimelineElement!]! @relation(name: "ScheduleToTimeline" onDelete: CASCADE)
  restline: [ScheduleRestlineElement!]! @relation(name: "ScheduleToRestline" onDelete: CASCADE)
  offline1: ScheduleOfflineElement @relation(name: "ScheduleToOffline1" onDelete: CASCADE)
  offline2: ScheduleOfflineElement @relation(name: "ScheduleToOffline2" onDelete: CASCADE)
}

type ScheduleTimelineElement {
  id: UUID! @unique
  category: ScheduleTimelineCategory!
  startTime: Int!
  startRequireEvent: Boolean!
  endTime: Int!
  endRequireEvent: Boolean!
}

type ScheduleRestlineElement {
  id: UUID! @unique
  category: ScheduleRestlineCategory!
  startTime: Int!
  startRequireEvent: Boolean!
  endTime: Int!
  endRequireEvent: Boolean!
  duration: Int!
}

type ScheduleOfflineElement {
  id: UUID! @unique
  category: ScheduleOfflineCategory!
  # TODO: add some way to justify the category here
  # eg justify what holiday this is etc
}

enum ScheduleCategory {
  SCH_TIME_WORK         # standard work time
  SCH_TIME_EXTRA        # extra work time

  SCH_TIME_MATERNAL    # autorized lactation hour
  SCH_TIME_LEAVE        # authorized downtime

  SCH_REST_LUNCH         # lunch time

  SCH_DAY_OFF
  SCH_DAY_VACATION
  SCH_DAY_HOLIDAY
  SCH_DAY_SICK
  SCH_DAY_PAID
  SCH_DAY_UNPAID
}

enum ScheduleTimelineCategory {
  SCH_TIME_WORK         # standard work time
  SCH_TIME_EXTRA        # extra work time
  SCH_TIME_MATERNAL    # autorized lactation hour
  SCH_TIME_LEAVE
}

enum ScheduleRestlineCategory {
  SCH_REST_LUNCH         # lunch time
}

enum ScheduleOfflineCategory {
  SCH_DAY_OFF
  SCH_DAY_VACATION
  SCH_DAY_HOLIDAY
  SCH_DAY_SICK
  SCH_DAY_PAID
  SCH_DAY_UNPAID
}

enum AttendanceCategory {
  ATT_START_LATE
  ATT_START_EARLY
  ATT_END_LATE
  ATT_END_EARLY
  ATT_REST_LATE
  ATT_ABSENT
  ATT_ABSENT_DOUBLE
}
